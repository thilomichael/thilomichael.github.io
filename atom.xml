<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thilo Michael</title><link href="http://uhlo.github.io/" rel="alternate"></link><link href="http://uhlo.github.io/atom.xml" rel="self"></link><id>http://uhlo.github.io/</id><updated>2018-04-25T15:15:00+02:00</updated><subtitle></subtitle><entry><title>A Deep Dive into rasa</title><link href="http://uhlo.github.io/a-deep-dive-into-rasa.html" rel="alternate"></link><published>2018-04-25T15:15:00+02:00</published><updated>2018-04-25T15:15:00+02:00</updated><author><name>Thilo Michael</name></author><id>tag:uhlo.github.io,2018-04-25:/a-deep-dive-into-rasa.html</id><summary type="html">&lt;p&gt;With the rise of personal assistants like Siri, Google Assistant, Cortana, Alexa and how they're all called, there seems to be a great interest in chat bots, which are basically small text-based Alexas! So - exactly like 20 years ago - many companies want cool chat-bot interfaces for Facebook, WhatsApp or simply …&lt;/p&gt;</summary><content type="html">&lt;p&gt;With the rise of personal assistants like Siri, Google Assistant, Cortana, Alexa and how they're all called, there seems to be a great interest in chat bots, which are basically small text-based Alexas! So - exactly like 20 years ago - many companies want cool chat-bot interfaces for Facebook, WhatsApp or simply their website. That's where rasa comes into play. rasa is a startup that provides a framework for building bots utilizing the hottest and newest approaches, including &lt;em&gt;Machine Learning&lt;/em&gt;™.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h2&gt;What is rasa?&lt;/h2&gt;
&lt;p&gt;That is a difficult question. It is the startup, the "&lt;em&gt;platform&lt;/em&gt;", the "&lt;em&gt;stack&lt;/em&gt;", the framework. So basically it is piece of software that you can use to build chat-bots and also a company that uses that framework and other tools (as far as I understood it) to build chat-bots for companies.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://rasa.com"&gt;&lt;img alt="A screenshot of rasa.com" src="images/rasa_screenshot.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The software itself, which is what I will focus on in this blog entry, is split into two projects: &lt;strong&gt;rasa core&lt;/strong&gt; and &lt;strong&gt;rasa nlu&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rasa nlu&lt;/strong&gt; handles the natural language understanding. It takes the sentences typed by the users, classifies it into one of several &lt;em&gt;intents&lt;/em&gt; (i.e. what is the user intending to do?) and detects &lt;em&gt;entities&lt;/em&gt; that are mentioned. So for example, when a user asks: "&lt;em&gt;What is the weather going to be tomorrow in Berlin?&lt;/em&gt;" a well trained NLU could return the intent &lt;code&gt;weather_request&lt;/code&gt; with the entities &lt;code&gt;date: "tomorrow"&lt;/code&gt; and &lt;code&gt;location: "Berlin"&lt;/code&gt;. rasa nlu uses &lt;a href="https://spacy.io"&gt;spacy&lt;/a&gt; under the hood and does its job very well (in my experience).&lt;/p&gt;
&lt;p&gt;The second part, &lt;strong&gt;rasa core&lt;/strong&gt;, is what I will focus on in this blog post. It is basically "&lt;em&gt;the rest&lt;/em&gt;" (which is probably why it's called &lt;em&gt;core&lt;/em&gt;) and it is mainly to solve the task "&lt;em&gt;What does the system should say/do given the dialogue up until now&lt;/em&gt;". For this, it uses a Recurrent Neural Network that gets the history of the last actions that were taken by the user as well as the system and predicts what action should be taken based on that.&lt;/p&gt;
&lt;p&gt;Just to show you how hip this framework is, let me tell you that the training data (dialogues that are used for the RNN to train on) are stored in a Markdown file and the domain is specified in YAML. But in all seriousness, this helps to remove the barrier for newcomers that want to build their own bot.&lt;/p&gt;
&lt;p&gt;I recommend you to at least look at their &lt;a href="https://core.rasa.com/tutorial_basics.html"&gt;basic tutorial&lt;/a&gt;, where you can see that you don't have to write a single line of code to build a (very basic) bot. I think that is very impressive (of course if you want a bot that actually does something, it gets slightly more complex).&lt;/p&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;Damn. This is also a difficult question. In principle, the tutorials on the rasa website try to let you create bots by only showing you the parts that you really need to know. Which is good if you just want to build a bot quickly, but is not good for the deeper understanding.&lt;/p&gt;
&lt;p&gt;Throughout the tutorials one page is always linked when it gets to the interesting "under the hood" stuff. The page is titled "Plumbing - How it all fits together" and mostly consists of this image:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://core.rasa.com/plumbing.html"&gt;&lt;img alt="The &amp;quot;Plumbing&amp;quot; of rasa" src="https://core.rasa.com/_images/rasa_arch_colour.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sadly, this is not that informative, but let me still try to explain this image a little bit. Basically, chat-bots are a pipeline: message comes in, bot does stuff, message comes out. In this case, the message arrives at the Interpreter &lt;code&gt;1&lt;/code&gt;. The Interpreter is rasa nlu and as I described above, it converts the text into something meaningful for the computer, namely an &lt;em&gt;intent&lt;/em&gt; and &lt;em&gt;entities&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This information is then handed to the Tracker &lt;code&gt;2&lt;/code&gt;. The Tracker is basically the control unit of the chat bot. It keeps track of what the system and user has already said, what information was given by the user (&lt;em&gt;slots&lt;/em&gt; that are filled). The Tracker takes the new dialogue act together with the acts from the last few turns and hands them to the Policy &lt;code&gt;3&lt;/code&gt;. The Policy is the RNN that then determines what Action &lt;code&gt;4&lt;/code&gt; the bot should take. The Action does its thing (for example retrieving the weather from an API), updates the Tracker (so that the Tracker knows which Action was being executed and to update the state accordingly) and sends a message to the user &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That seems very simple and bots with only a few stories (i.e. training data) already work rather well. So, that's it, right?&lt;/p&gt;
&lt;h2&gt;What's a Memoization?&lt;/h2&gt;
&lt;p&gt;Digging deeper into the rasa core source code, I saw that this image is oversimplifying (duh). In the second tutorial I found the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;policies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MemoizationPolicy&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;RestaurantPolicy&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code is executed during training and it seems the the agent is given a list of policies. The &lt;code&gt;RestaurantPolicy&lt;/code&gt; is a policy created in the tutorial and is basically an LSTM RNN. The &lt;code&gt;MemoizationPolicy&lt;/code&gt; however is not really explained. Here is what the documentation says:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://core.rasa.com/tutorial_supervised.html#a-custom-dialogue-policy"&gt;&lt;img alt="Note: Remember, you do not need to create your own policy. The default policy setup using a memoization policy and a Keras policy works quite well. Nevertheless, you can always fine tune them for your use case. Read Plumbing - How it all fits together for more info." src="images/plumbing.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The link to the Plumbing page unsurprisingly did not yield new insights. However, the picture with the one policy is not quite complete.&lt;/p&gt;
&lt;p&gt;Looking at the source code for the tracker I could find the &lt;code&gt;PolicyEnsemble&lt;/code&gt;, a class that can incorporate different policies (i.e. decision makers). So, at each step of the dialogue multiple policies are executed and the best one gets the bid.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimplePolicyEnsemble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PolicyEnsemble&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;policies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;known_slot_events&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SimplePolicyEnsemble&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;policies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;known_slot_events&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;probabilities_using_best_policy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tracker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="n"&gt;decision_maker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="n"&gt;max_confidence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;policies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;probabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict_action_probabilities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tracker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;confidence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;probabilities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;confidence&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_confidence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;max_confidence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;confidence&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;probabilities&lt;/span&gt;
                &lt;span class="n"&gt;decision_maker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; made the decision!&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;decision_maker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;SimplePolicyEnsemble&lt;/code&gt; asks each policy for their probabilities given the tracker (i.e. the current state) and the domain and selects the decision of the policy with the highest confidence. Note that I added a debug output (&lt;em&gt;decision_maker&lt;/em&gt;) which prints the policy that had the highest confidence, just so I could see in each turn which policy was responsible for the actions of the bot.&lt;/p&gt;
&lt;p&gt;Let's see what action probabilities the &lt;code&gt;MemoizationPolicy&lt;/code&gt; is producing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;predict_action_probabilities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tracker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;featurize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tracker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;tracker_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;featurizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                         &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input_features&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Current tracker state [&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;]&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tracker_state&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

        &lt;span class="n"&gt;memorised&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_actions&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;memorised&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Used memorised next action &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memorised&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;memorised&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;MemoizationPolicy&lt;/code&gt; &lt;em&gt;recalls&lt;/em&gt;, if it saw the current dialogue in the training data. If so, it returns what's in the training data with 100% confidence. That means if you stay in the "golden path" (the stories that were trained) the memoization policy does exactly what's in the training data.&lt;/p&gt;
&lt;h2&gt;Who is pulling the strings?&lt;/h2&gt;
&lt;p&gt;With the added debug output in the policy ensemble and the memoization policy, I saw that most of the time the memoization policy decided the next turn. In it self, this is not a bad thing. If a dialogue is exactly like in the training data, it is probably not a bad idea to do what the training data says.&lt;/p&gt;
&lt;p&gt;However, when I disabled the memoization policy the neural network did not perform as expected.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;

&lt;span class="n"&gt;Logging&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;    &lt;span class="n"&gt;rasa_core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processor&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Received&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;: &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;confidence&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;: 0.9174638293066442}&amp;#39;&lt;/span&gt; &lt;span class="kr"&gt;and&lt;/span&gt; &lt;span class="n"&gt;entities&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;[]&amp;#39;&lt;/span&gt;
&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;    &lt;span class="n"&gt;rasa_core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;policies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensemble&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RestaurantPolicy&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x12d3c6438&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;made&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;decision&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="n"&gt;WARNING&lt;/span&gt;  &lt;span class="n"&gt;rasa_core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processor&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Circuit&lt;/span&gt; &lt;span class="n"&gt;breaker&lt;/span&gt; &lt;span class="n"&gt;tripped&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Stopped&lt;/span&gt; &lt;span class="n"&gt;predicting&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;

&lt;span class="kr"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;m on it&lt;/span&gt;
&lt;span class="s"&gt;--&amp;gt; I&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;m on it&lt;/span&gt;
&lt;span class="s"&gt;--&amp;gt; what kind of cuisine would you like?&lt;/span&gt;
&lt;span class="s"&gt;--&amp;gt; I&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;m on it&lt;/span&gt;
&lt;span class="s"&gt;--&amp;gt; I&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="n"&gt;cuisine&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;m on it&lt;/span&gt;
&lt;span class="s"&gt;--&amp;gt; I&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's not looking good. To clarify: I removed some logging messages, but in principle the bot is producing more and more actions, more and more responses until the rasa core activates a "circuit breaker" so that the bot is not stuck in an endless loop. The rasa nlu classified the input correctly (intent &lt;code&gt;greet&lt;/code&gt; and no entities mentioned) and the Restaurant policy made the decision.&lt;/p&gt;
&lt;p&gt;Why is this happening? Short answer: &lt;code&gt;action_listen&lt;/code&gt;. Long answer: there is a "&lt;em&gt;hidden&lt;/em&gt;" action the bot can do: the listen action. After the user writes something the policy is activated again and again until it produces an &lt;code&gt;action_listen&lt;/code&gt; where the bot awaits new input from the user. This way the bot is able to answer with more than one action. For example, if the user has requested to search for a restaurant, the bot can execute the action &lt;code&gt;action_on_it&lt;/code&gt; - telling the user that it could take a while - and then it could execute the &lt;code&gt;bot.ActionSearchRestaurants&lt;/code&gt; action.&lt;/p&gt;
&lt;p&gt;That's a neat feature, but it seems to make problems with the neural network. The network (called the &lt;code&gt;KerasPolicy&lt;/code&gt;) is asked what to do next. It predicts to say "&lt;em&gt;I'm on it&lt;/em&gt;", sends the message to the user and informs the tracker. The tracker then takes the update dialogue and activates the policy again. Because there is something wrong with our neural net, it again predicts the &lt;code&gt;action_on_it&lt;/code&gt; action and round and round it goes.&lt;/p&gt;
&lt;p&gt;One other noteworthy case that seems to appear often is that after a users input the machine learning policy immediately predicts the &lt;code&gt;action_listen&lt;/code&gt;. That way the bot simply is silent and awaits new inputs from the user.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;So the machine learning approach is not that robust and useful as it seemed! I don't want to say that it is not working, just that the parameters included in the tutorial are clearly not working out.&lt;/p&gt;
&lt;p&gt;I will try to tweak some parameters and see if I can get the system to run in a more acceptable way. I will also look into the featurization of the dialogue state. Maybe there are some insight to why the current settings are not working.&lt;/p&gt;</content><category term="Dialogue"></category><category term="programming"></category><category term="rasa"></category><category term="chat-bot"></category><category term="dialogue systems"></category><category term="machine learning"></category></entry><entry><title>AstrologySort</title><link href="http://uhlo.github.io/astrologysort.html" rel="alternate"></link><published>2017-09-26T12:50:00+02:00</published><updated>2017-09-26T12:50:00+02:00</updated><author><name>Thilo Michael</name></author><id>tag:uhlo.github.io,2017-09-26:/astrologysort.html</id><summary type="html">&lt;p&gt;Some days ago I was bored and searched the internet for something to do. Something productive. Naturally, I went straight to the okayest subreddit I know (&lt;a href="https://reddit.com/r/shittyprogramming"&gt;/r/shittyprogramming&lt;/a&gt;) and searched for "idea" to get the hottest news on what one might productively do. And you will never guess what I've …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some days ago I was bored and searched the internet for something to do. Something productive. Naturally, I went straight to the okayest subreddit I know (&lt;a href="https://reddit.com/r/shittyprogramming"&gt;/r/shittyprogramming&lt;/a&gt;) and searched for "idea" to get the hottest news on what one might productively do. And you will never guess what I've found... *&lt;em&gt;clickbaiting intensifies&lt;/em&gt;*&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;Well, maybe you've guessed it with the help of the big fat title above this post: &lt;a href="https://www.reddit.com/r/shittyprogramming/comments/7168o5/idea_use_astrology_to_predict_branching_see_if_it/dn8mq9s/"&gt;someone suggested to use astrology for sorting&lt;/a&gt;:&lt;/p&gt;
&lt;div class="reddit-embed" data-embed-media="www.redditmedia.com" data-embed-parent="false" data-embed-live="false" data-embed-uuid="a33077e8-f426-4688-8538-855043aa9a16" data-embed-created="2017-09-25T15:41:57.650Z"&gt;&lt;a href="https://www.reddit.com/r/shittyprogramming/comments/7168o5/idea_use_astrology_to_predict_branching_see_if_it/dn8mq9s/"&gt;Comment&lt;/a&gt; from discussion &lt;a href="https://www.reddit.com/r/shittyprogramming/comments/7168o5/idea_use_astrology_to_predict_branching_see_if_it/"&gt;Idea: use astrology to predict branching, see if it works.&lt;/a&gt;.&lt;/div&gt;
&lt;script async src="https://www.redditstatic.com/comment-embed.js"&gt;&lt;/script&gt;

&lt;p&gt;While i liked the idea of using a long proven "&lt;em&gt;alternative source of truth&lt;/em&gt;" (as I like to call it) for sorting, I didn't quite understand the predictions of this user concerning the runtime.&lt;/p&gt;
&lt;p&gt;So I dusted off my vim and got to work.&lt;/p&gt;
&lt;h2&gt;Some Research&lt;/h2&gt;
&lt;p&gt;While thinking about how to realize an AstrologySort-algorithm, my first doubts in this project arose: &lt;em&gt;What is astrology? How could it ever be used to sort a list of numbers? How do I exit vim?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, after I killed my terminal, I reflected on my scientific education and went straight to the most trustworthy source I know: Google. The complicated and precisely targeted search term "Astrology" revealed all the information needed: &lt;a href="https://astrology.com"&gt;astrology.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://astrology.com"&gt;&lt;img alt="A screenshot of astrology.com" src="images/astrologycom_screenshot.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Almost instantly I spotted the "&lt;em&gt;Numerology&lt;/em&gt;"-section of the website. I simply &lt;em&gt;knew&lt;/em&gt; that this was the missing key to all my questions (except the one about how to exit vim).&lt;/p&gt;
&lt;p&gt;But something still didn't feel quite right. Not scientific enough. What I needed was &lt;em&gt;hard evidence&lt;/em&gt;, the kind that could be cited in papers and stuff. So I looked up "&lt;em&gt;Numerology&lt;/em&gt;" in Wikipedia. And there it was: &lt;a href="https://en.wikipedia.org/wiki/Numerology"&gt;A whole Wikipedia entry on this exact topic.&lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It has its own Wikipedia entry, therefore it must be real.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With this, I was ready to end the research intensive part of this project.&lt;/p&gt;
&lt;h2&gt;The Divine Source of Numbers&lt;/h2&gt;
&lt;p&gt;The most well known tool of applied Numerology is of course the "&lt;em&gt;Daily Karmic Number&lt;/em&gt;". I don't exactly know how it works, but I guess it has something to do with karma (so it's basically just like reddit). Every person has one Daily Karmic Number (DKN) for each day, but when I disabled cookies I got a new karmic number every time I loaded the page. Maybe I just have bad karma or something, but I went with it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.astrology.com/us/games/game-daily-karmic-number.aspx"&gt;&lt;img alt="Daily Karmic Number on astrology.com" src="images/astrologycom_dkn_screenshot.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So I postulate that if a number is your DKN it is better for you and it should therefore be at the front of a sorted list. Likewise, when comparing two numbers, it should be clear that the number that appears first as a DKN should be before the other.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;the_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sorted_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;the_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dkn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_dkn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dkn&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sorted_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dkn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;the_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dkn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the code example above, the &lt;code&gt;get_dkn&lt;/code&gt;-function connects to astrology.com and fetches the latest DKN.&lt;/p&gt;
&lt;p&gt;When I tested my code I got some very unusual and unexpected results: the numbers in the list weren't &lt;em&gt;sorted&lt;/em&gt;. At least not by the definition I learned in algorithms 101.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorted list:  [9, 11, 3, 8, 1, 6, 3, 4]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Turns out, the problem was not my implementation of the algorithm, but my expectations of it. The AstrologySort does not sort lists in a regular old-fashioned way. It sorts the numbers by &lt;em&gt;personal karmic ability&lt;/em&gt;, which is much better than all the other sorting algorithms there are!&lt;/p&gt;
&lt;h2&gt;The Performance Test&lt;/h2&gt;
&lt;p&gt;But the word of that one redditor still remained in my head: "&lt;em&gt;It might even be slower than BogoSort.&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;That's why I ran some simple performance tests with BogoSort and AstrologySort. I tested with random-numbered (1 &amp;lt;= x &amp;lt;= 9) list that ranged in size from 1 to 10. I checked for the number of iterations it took and for the time.&lt;/p&gt;
&lt;iframe width="100%" height="400" frameborder="0" scrolling="no" src="//plot.ly/~uhlomuhlo/2.embed"&gt;&lt;/iframe&gt;

&lt;p&gt;And as it turns out, the redditor was right! The chart shows clearly that while bogus sort is extremely fast for small lists, it is gets exponentially worse with larger lists. On the other hand, astrology sort is very slow for small lists and for large lists.&lt;/p&gt;
&lt;iframe width="100%" height="400" frameborder="0" scrolling="no" src="//plot.ly/~uhlomuhlo/1.embed"&gt;&lt;/iframe&gt;

&lt;p&gt;The same with the number of steps to complete the sorting. While bogus sort shows its exponential behavior, astrology sort is more or less constant in the amount of steps it takes (if you look at it from far enough - and that's what astrology is all about).&lt;/p&gt;
&lt;p&gt;So I just presented a constant time sorting algorithm, that sorts in such a special way that the numbers aren't even ordered afterwards! A miracle? No. It's just the way astrology works.&lt;/p&gt;</content><category term="Random"></category><category term="random"></category><category term="programming"></category><category term="highqualitybullshit"></category><category term="astrology"></category></entry><entry><title>Hello World 2.0!</title><link href="http://uhlo.github.io/hello-world-20.html" rel="alternate"></link><published>2017-08-22T10:53:00+02:00</published><updated>2017-08-22T10:53:00+02:00</updated><author><name>Thilo Michael</name></author><id>tag:uhlo.github.io,2017-08-22:/hello-world-20.html</id><summary type="html">&lt;p&gt;So this blog did not receive any love from me for quite some time. That's why I decided to revamp the whole thing and now it looks completely the same! Want to read me ramble about that topic for some paragraphs? Then read on...&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h3&gt;That one time I tried to …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;So this blog did not receive any love from me for quite some time. That's why I decided to revamp the whole thing and now it looks completely the same! Want to read me ramble about that topic for some paragraphs? Then read on...&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h3&gt;That one time I tried to run a blog&lt;/h3&gt;
&lt;p&gt;In the beginning, there was light. After that - in mid 2014 I think - I started this blog. And behold, I saw that all was well. I used &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt;, a Content Management Framework written in Ruby (Version 3 is promised to be coming since January 2015, so let's see how that will turn out). Octopress has nice tools for syntax highlighting and is basically a neat little static site generator extended by some blogging features.&lt;/p&gt;
&lt;p&gt;But since Octopress is build in &lt;em&gt;Ruby&lt;/em&gt;, a language that I have a love-hate relationship with, it soon came to problems. Ruby sucks (or at least it sucked back in the day) when it comes to managing packages. Back in 2013/2014 I did a lot of stuff with Ruby and Rails and every few weeks, some &lt;em&gt;gem&lt;/em&gt; broke and I spend hours trying to fix that so I could continue to work.&lt;/p&gt;
&lt;p&gt;The same thing happened with this blog. I could neither get Octopress to run, nor could I bring myself to debug it, mostly because I knew it would definitly break again.&lt;/p&gt;
&lt;p&gt;Usually, the main apology for someone not blogging is the lack of time to write posts. But I was quite often willing to blog - I even set up a Wordpress blog. But the usual blogging systems are not right for me as they have all these features I don't use and are hard to customize.&lt;/p&gt;
&lt;h3&gt;Riding the Pelican&lt;/h3&gt;
&lt;p&gt;Now I took some time to set up a &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; blog. Which is basically the same thing, but with Python. It took some hours to get the old theme from Octopress running, but now everything (except comments and some minor other stuff) is working.&lt;/p&gt;
&lt;p&gt;And I have to say, I'm quite happy about it. The only thing left is writing some blog posts. Let's see how this turns out...&lt;/p&gt;</content><category term="Meta"></category><category term="blog"></category><category term="meta"></category><category term="pelican"></category></entry><entry><title>U.N. Interstellar was her?</title><link href="http://uhlo.github.io/un-interstellar-was-her.html" rel="alternate"></link><published>2014-11-09T21:57:36+01:00</published><updated>2014-11-09T21:57:36+01:00</updated><author><name>Thilo Michael</name></author><id>tag:uhlo.github.io,2014-11-09:/un-interstellar-was-her.html</id><summary type="html">&lt;p&gt;So I've seen the new Christopher Nolan movie Interstellar yesterday! I had very mixed feelings about it and I will definitely see it again soon. The movie turned out pretty different that I had imagined and that threw me a bit off. This blog post however is not about the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So I've seen the new Christopher Nolan movie Interstellar yesterday! I had very mixed feelings about it and I will definitely see it again soon. The movie turned out pretty different that I had imagined and that threw me a bit off. This blog post however is not about the movie directly but about the music in it. So don't worry: no spoilers :)&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h3&gt;The Film Score&lt;/h3&gt;
&lt;p&gt;The film score was written by Hans Zimmer. Apparently there isn't a reasonably successful movie that Hans Zimmer didn't make to music to. The score was a bit repetitive but that's okay because I liked the main theme. It reminded me a bit of the main theme of Nolan's previous movie Inception.
Anyways you can listen to an extended version of the main theme here:&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/wqnnRIwoxB8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;I know that from somewhere...&lt;/h3&gt;
&lt;p&gt;While watching the movie I had these feeling that up until a certain point in the progression of the melody I recognized it from somewhere but in the cinema I thought it was a &lt;em&gt;deja entendu&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The next day I tried playing the melody on my e-piano and suddenly realize where my deja entendu came from: U.N. Owen was her? (or Flandre's Theme as many people call it).
Flandre's Theme is played during the extra stage boss fight in the vertical-scrolling game &lt;a href="http://en.wikipedia.org/wiki/Touhou_Project"&gt;Touhou Project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I made a quick recording of my findings:&lt;/p&gt;
&lt;iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/176120105&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true"&gt;&lt;/iframe&gt;

&lt;p&gt;I know, I know. It is barely similar. I had fun anyway :)&lt;/p&gt;</content><category term="Random"></category><category term="random"></category><category term="movies"></category><category term="music"></category></entry><entry><title>Compression Distance</title><link href="http://uhlo.github.io/compression-distance.html" rel="alternate"></link><published>2014-10-19T00:36:13+02:00</published><updated>2014-10-19T00:36:13+02:00</updated><author><name>Thilo Michael</name></author><id>tag:uhlo.github.io,2014-10-19:/compression-distance.html</id><summary type="html">&lt;p&gt;So I've recently looked into compression based distances as part of research for a masters course at the TU Berlin. What I found was a really interesting way of measuring distances between two textures (i.e. images).&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h3&gt;Distances? Images!?&lt;/h3&gt;
&lt;p&gt;Yep. In principle one could measure some distances between any two …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So I've recently looked into compression based distances as part of research for a masters course at the TU Berlin. What I found was a really interesting way of measuring distances between two textures (i.e. images).&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h3&gt;Distances? Images!?&lt;/h3&gt;
&lt;p&gt;Yep. In principle one could measure some distances between any two objects. For example an acceptable distance measure between two images could be the difference in pixels or the difference in brightness. These distance measures all have their field of application but when &lt;em&gt;normal humans&lt;/em&gt; talk about similarity in images they mean something different. Computers in general however have a hard time figuring out what we humans consider &lt;em&gt;similar&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Compression based distances&lt;/h3&gt;
&lt;p&gt;One way to measure distances between objects in general is called compression distance. The way it works could be roughly described as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The more efficiently an algorithm can compress object A given object B the more similar the two objects are.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So what does that mean? As a little example: Take the sentence A: &lt;em&gt;"I like ice cream."&lt;/em&gt; and compare it to the two sentences B: &lt;em&gt;"I like ice tea."&lt;/em&gt; and C: &lt;em&gt;"Has Anyone Really Been Far Even as Decided to Use Even Go Want to do Look More Like?"&lt;/em&gt;. Of course sentence A is more similar to B than C. But how could a computer measure that similarity? Easy! Just use a compression based distance.&lt;/p&gt;
&lt;p&gt;When compressing &lt;em&gt;"I like ice cream."&lt;/em&gt; together with &lt;em&gt;"I like ice tea."&lt;/em&gt; a lot of information can be compressed (for example both sentences share the prefix &lt;em&gt;I like ice&lt;/em&gt; in common). Compressing sentence A and C together would have a lot less potential for compression (none of the words in sentence A are contained in C).&lt;/p&gt;
&lt;p&gt;And that's the concept of compression based distances&lt;/p&gt;
&lt;h3&gt;Campana-Keogh-1&lt;/h3&gt;
&lt;p&gt;No I didn't just sneezed. Campana-Keogh-1 or CK-1 for short is a neat little algorithm for measuring the distance between two images. And because no one wants to write complicated algorithms this one is very simple.&lt;/p&gt;
&lt;p&gt;The idea is to let someone else do all the work: MPEG-1. MPEG-1 is used for compressing videos and it is really good at it! One very cool feature of such video encoding algorithms is the predictive frame. When using predictive frames only the difference to the preceding image is stored. So when two following images in a video are &lt;em&gt;similar&lt;/em&gt; (which is often the case in movies), MPEG-1 only has to store the pixels that differ between the two images. Very neat, huh?&lt;/p&gt;
&lt;p&gt;So what CK-1 is basically doing is to create two-frame videos. The smaller the resulting video-file the more similar the two images are. So the CK-1 algorithm basically just looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;distance&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;CK1Distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x,y&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mpegSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mpegSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mpegSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mpegSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;−=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code&gt;mpegSize(x,y)&lt;/code&gt; just returns the size of an MPEG-1 video with two frames &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Simple as that. But the results are very nice!&lt;/p&gt;
&lt;h3&gt;Who is this Mulder guy?&lt;/h3&gt;
&lt;p&gt;So I've been watching some x-files episodes lately and because I always like to do stuff while I'm binging a TV series I decided to test the CK-1 algorithm on Mulder.&lt;/p&gt;
&lt;div style="width: 100%; text-algin: center;"&gt;
  &lt;img src="/images/whackamulder.png" alt="Some Screenshots of persons in an x-files episode"/&gt;
&lt;/div&gt;

&lt;p&gt;So I took 4 screenshots of Mulder and 2 from other people in similar poses. Then I ran these images through my self-written little CK-1 Java program (because who the heck has a license for Matlab??) and these were the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;d(mulder1.png,mulder1.png) = 0.0
d(mulder1.png,mulder2.png) = 0.6300178810907466
d(mulder1.png,mulder3.png) = 0.7965330333401515
d(mulder1.png,mulder4.png) = 0.9076955523269439
d(mulder1.png,someone.png) = 1.0699117676216914
d(mulder1.png,someone2.png) = 1.1179630519282

d(mulder2.png,mulder2.png) = 0.0
d(mulder2.png,mulder3.png) = 0.7866943866943867
d(mulder2.png,mulder4.png) = 0.882641168355454
d(mulder2.png,someone.png) = 1.0327691102945606
d(mulder2.png,someone2.png) = 1.080532305920907

d(mulder3.png,mulder3.png) = 0.0
d(mulder3.png,mulder4.png) = 0.8846048223210854
d(mulder3.png,someone.png) = 1.037555178268251
d(mulder3.png,someone2.png) = 0.9344867708807609

d(mulder4.png,mulder4.png) = 0.0
d(mulder4.png,someone.png) = 1.0254100592831557
d(mulder4.png,someone2.png) = 0.9044922962687953

d(someone.png,someone.png) = 0.0
d(someone.png,someone2.png) = 1.045421475903022

d(someone2.png,someone2.png) = 0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, &lt;code&gt;mulder1&lt;/code&gt; and &lt;code&gt;mulder2&lt;/code&gt; are almost the same images. Some basic histogram analysis would have revealed that these two images would be the most &lt;em&gt;similar&lt;/em&gt;. But the fact that &lt;code&gt;mulder3&lt;/code&gt; is more similar to the other Mulders than to the random persons (even if the margin is not that high) is pretty neat. The &lt;code&gt;mulder4&lt;/code&gt; images seems to be more similar to &lt;code&gt;someone2&lt;/code&gt; than to &lt;code&gt;mulder1&lt;/code&gt; but I think that's okay if we think about how simple and fast this algorithm is.&lt;/p&gt;
&lt;h3&gt;Do some stuff!&lt;/h3&gt;
&lt;p&gt;If you want to you can try my super cool CK-1 distance calculator on your own!
Just download it from &lt;a href="/assets/CK1Java.jar"&gt;here&lt;/a&gt; and run it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ java -jar CK1Java.jar /path/to/folder/with/imgs/
 - OR -
$ java -jar CK1Jar.jar img1.png img2.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You just have to have &lt;code&gt;mencoder&lt;/code&gt; installed and available before running.&lt;/p&gt;</content><category term="Programming"></category><category term="programming"></category><category term="movies"></category></entry><entry><title>My Octopress Blog</title><link href="http://uhlo.github.io/my-octopress-blog.html" rel="alternate"></link><published>2014-07-30T17:36:44+02:00</published><updated>2014-07-30T17:36:44+02:00</updated><author><name>Thilo Michael</name></author><id>tag:uhlo.github.io,2014-07-30:/my-octopress-blog.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;UPDATE: My blog now runs on pelican. Ignore this post. Really.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So I have a new website/blog. It is made with the &lt;a href="http://octopress.org"&gt;octopress&lt;/a&gt; blogging framework. Octopress is rather different from all the content management systems and blogs I've seen before. Since version 2.0 it is based on &lt;a href="https://github.com/jekyll/jekyll"&gt;jekyll …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;UPDATE: My blog now runs on pelican. Ignore this post. Really.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So I have a new website/blog. It is made with the &lt;a href="http://octopress.org"&gt;octopress&lt;/a&gt; blogging framework. Octopress is rather different from all the content management systems and blogs I've seen before. Since version 2.0 it is based on &lt;a href="https://github.com/jekyll/jekyll"&gt;jekyll&lt;/a&gt; and thus has a completetly different approach on content management and creation. It uses rake tasks to accomplish most of the work. Because octopress is a framework, the comfort for creating and managing content are rather sparse, but then again it is really powerfull if you know what you're doing.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;h3&gt;CMF instead of CMS&lt;/h3&gt;
&lt;p&gt;Octopress is a content management framework, not a content management system. What that means in practice is that you would create a new blog entry with a rake task on your commandline like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ rake new_post&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;My octopress blog&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command simply creates a markdown-file with some attributes predefined:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
layout: post
title: &amp;quot;My octopress blog&amp;quot;
date: 2014-07-30 17:36:44 +0200
comments: true
categories:
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Below these attributes you can write your blog entry in markdown (with some cool octopress features included). If you want to &lt;em&gt;manage&lt;/em&gt; your posts you can add an &lt;code&gt;author&lt;/code&gt; or a &lt;code&gt;published&lt;/code&gt; field. Because it's markdown you can easily inject some HTML into your post.&lt;/p&gt;
&lt;p&gt;That's it. No user management, no unnecessary back-end menus. I really like it :)&lt;/p&gt;
&lt;h3&gt;The power of simplicity&lt;/h3&gt;
&lt;p&gt;Because octopress consists of a few HTML files (with templating) here and a few sass files there you can easily change the layout and the pages to match how you want them to be.&lt;/p&gt;
&lt;p&gt;I really like the idea to use a real files to store the blog posts. I don't really need a fancy SQL database to store information about the user, about plugins and about my posts. Things like comments can be injected with &lt;a href="https://disqus.com"&gt;disqus&lt;/a&gt;. You can even write your post offline and then upload them as soon as you are back online. It just makes everything so much simpler.&lt;/p&gt;
&lt;p&gt;The only downside to this is that you need to deploy your blog every time you post a new entry. But if you host your little blog on &lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt; that is less of a problem.
&lt;strong&gt;&lt;em&gt;Update: This blog is no longer running on Heroku&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Not for everyone&lt;/h3&gt;
&lt;p&gt;Octopress however is not suited for everyone. Multi-author blogs are supported, but writing my name into every post does not do it for most people. Implementing your own comment system is nearly impossible without setting up a database.&lt;/p&gt;
&lt;p&gt;But octopress does not want to be for everyone. It describes itself as "a blogging framework for hackers". And that is exactly what it is. For people who just want to run their little blog, share their thoughts and ideas and also want to some really cool syntax highlight ;) its a really impressive alternative.&lt;/p&gt;</content><category term="Meta"></category><category term="blog"></category><category term="meta"></category><category term="octopress"></category></entry></feed>